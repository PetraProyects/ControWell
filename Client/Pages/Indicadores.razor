@inject IJSRuntime JS
@inject HttpClient Http

<div>
    <canvas id="myChart"></canvas>
</div>


@code {


    public static List<Tanque> Tanques = new List<Tanque>();
    public static List<Tanque> TanquesSinMov = new List<Tanque>();
    public static List<Balance> UltimosMovimientos = new List<Balance>();
    Consulta consulta = new Consulta();   
    Balance BalanceModal = new Balance();
    Tanque TanqueModal = new Tanque();
    double crudo = 0;
    double agua = 0;
    double nafta = 0;
    protected override async Task OnInitializedAsync()
    {
        await Actualizar();
        await JS.InvokeVoidAsync("Graficar", crudo, nafta, agua);
        JS.InvokeVoidAsync("Graficar", crudo, nafta, agua);
    }

    async Task Actualizar()
    {

        var resultadoTan = await Http.GetFromJsonAsync<List<Tanque>>("api/Tanque");
        if (resultadoTan != null)
            Tanques = resultadoTan;
        var resultadoTanSinMov = await Http.GetFromJsonAsync<List<Tanque>>("api/Tanque/SinMovimiento");
        if (resultadoTanSinMov != null)
            TanquesSinMov = resultadoTanSinMov;
        var ultimos = await Http.PostAsJsonAsync($"api/Balance/Aforos", consulta);
        UltimosMovimientos = await ultimos.Content.ReadFromJsonAsync<List<Balance>>();
        foreach (var i in UltimosMovimientos)
        {
            if (i.Tanque.TipoFluido == "Crudo")
            {
                crudo += i.NSV();
                agua += i.AGUANETA();
            }
            if (i.Tanque.TipoFluido == "Refinado")
            {
                nafta += i.NSV();
            }
        }
    }
}

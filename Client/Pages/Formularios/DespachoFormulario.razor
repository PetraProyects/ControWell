@inject HttpClient Http
@inject SweetAlertService Swal
@inject IJSRuntime JS
@using CurrieTechnologies.Razor.SweetAlert2
@inject NavigationManager Navigation

<br />

@if (ConteoTanques >= 2)
{
    <Callout Type="CalloutType.Info" Heading="TANQUE">
        <div class="row">
            <div class="col-4">
                <EditForm Model="tanque2">
                    <label>Tanque</label>
                    <InputSelect @bind-Value="tanque2.Id" class="form-control" placeholder="Capacidad">
                        <option value="-1">Elegir Tanque</option>
                        @foreach (var i in UltimosMovimientos)
                        {
                            <option value="@i.Tanque.Id.">@i.Tanque.NombreTanque</option>
                        }
                    </InputSelect>
                </EditForm>
            </div>
           <div class="col-8">
                @foreach (var b in UltimosMovimientos)
                {
                    if (b.Tanque.Id == tanque2.Id)
                    {
                        balance2 = b;
                        <TanGeneral BalanceModal="b" />
                    }

                }
           </div>
        </div>
    </Callout>
    <Callout Type="CalloutType.Tip" Heading="CONDICIONES">
        <EditForm Model="balance2" class="auth-form login-form">
            <div class="row">
                <div class="col-4">
                    <label>Nivel</label>
                    <input name="signin-email" type="number" class="form-control signin-email" placeholder="Nivel" required="required" @bind=balance2.Nivel />
                </div>
                <div class="col-4">
                    <label>Interfase</label>
                    <input id="signin-password" name="signin-password" type="number" class="form-control signin-password" placeholder="Interfase" required="required" @bind=balance2.Interfase />
                </div>
                <div class="col-4">
                    <label>API</label>
                    <input name="signin-email" type="number" class="form-control signin-email" placeholder="Api" required="required" @bind=balance2.Api />
                </div>
            </div>
            <div class="row">
                <div class="col-4">
                    <label>TEMP API</label>
                    <input id="signin-password" name="signin-password" type="number" class="form-control signin-password" placeholder="T API" required="required" @bind=balance2.TemFluidoApi />
                </div>
                <div class="col-4">
                    <label>TEMP AMBIENTE</label>
                    <input name="signin-email" type="number" class="form-control signin-email" placeholder="T amb" required="required" @bind=balance2.TemAmbiente />
                </div>
                <div class="col-4">
                    <label>TEMP TANQUE</label>
                    <input id="signin-password" name="signin-password" type="number" class="form-control signin-password" placeholder="T Tanq" required="required" @bind=balance2.TemTanque />
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <label>S&W</label>
                    <input name="signin-email" type="number" class="form-control signin-email" placeholder="S&W" required="required" @bind=balance2.Syw />
                </div>
                <div class="col-6">
                    <label>KARL FISHER</label>
                    <input id="signin-password" name="signin-password" type="number" class="form-control signin-password" placeholder="K F" required="required" @bind=balance2.KarlFisher />
                </div>
            </div>           
        </EditForm>
    </Callout>   
}
else
{
    balance2.Id = -1;
}

@if (ConteoTanques >= 3)
{
    <Callout Type="CalloutType.Info" Heading="TANQUE">
        <div class="row">
            <div class="col-4">
                <EditForm Model="tanque3">
                    <label>Tanque</label>
                    <InputSelect @bind-Value="tanque3.Id" class="form-control" placeholder="Capacidad">
                        <option value="-1">Elegir Tanque</option>
                        @foreach (var i in UltimosMovimientos)
                        {
                            <option value="@i.Tanque.Id.">@i.Tanque.NombreTanque</option>
                        }
                    </InputSelect>
                </EditForm>
            </div>
            <div class="col-8">
                @foreach (var b in UltimosMovimientos)
                {
                    if (b.Tanque.Id == tanque3.Id)
                    {
                        balance3 = b;
                        <TanGeneral BalanceModal="b" />
                    }

                }
            </div>
        </div>
    </Callout>
    <Callout Type="CalloutType.Tip" Heading="CONDICIONES">
        <EditForm Model="balance3" class="auth-form login-form">
            <div class="row">
                <div class="col-4">
                    <label>Nivel</label>
                    <input name="signin-email" type="number" class="form-control signin-email" placeholder="Nivel" required="required" @bind=balance3.Nivel />
                </div>
                <div class="col-4">
                    <label>Interfase</label>
                    <input id="signin-password" name="signin-password" type="number" class="form-control signin-password" placeholder="Interfase" required="required" @bind=balance3.Interfase />
                </div>
                <div class="col-4">
                    <label>API</label>
                    <input name="signin-email" type="number" class="form-control signin-email" placeholder="Api" required="required" @bind=balance3.Api />
                </div>
            </div>
            <div class="row">
                <div class="col-4">
                    <label>TEMP API</label>
                    <input id="signin-password" name="signin-password" type="number" class="form-control signin-password" placeholder="T API" required="required" @bind=balance3.TemFluidoApi />
                </div>
                <div class="col-4">
                    <label>TEMP AMBIENTE</label>
                    <input name="signin-email" type="number" class="form-control signin-email" placeholder="T amb" required="required" @bind=balance3.TemAmbiente />
                </div>
                <div class="col-4">
                    <label>TEMP TANQUE</label>
                    <input id="signin-password" name="signin-password" type="number" class="form-control signin-password" placeholder="T Tanq" required="required" @bind=balance3.TemTanque />
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <label>S&W</label>
                    <input name="signin-email" type="number" class="form-control signin-email" placeholder="S&W" required="required" @bind=balance3.Syw />
                </div>
                <div class="col-6">
                    <label>KARL FISHER</label>
                    <input id="signin-password" name="signin-password" type="number" class="form-control signin-password" placeholder="K F" required="required" @bind=balance3.KarlFisher />
                </div>
            </div>            
        </EditForm>
    </Callout>  
}
else
{
    balance3.Id = -1;
}

@if (ConteoTanques >= 4)
{
    <Callout Type="CalloutType.Info" Heading="TANQUE">
        <div class="row">
            <div class="col-4">
                <EditForm Model="tanque4">
                    <label>Fluido Almacenado</label>
                    <InputSelect @bind-Value="tanque4.Id" class="form-control" placeholder="Capacidad">
                        <option value="-1">Elegir Tanque</option>
                        @foreach (var i in UltimosMovimientos)
                        {
                            <option value="@i.Tanque.Id.">@i.Tanque.NombreTanque</option>
                        }
                    </InputSelect>
                </EditForm>
            </div>
            <div class="col-8">
                @foreach (var b in UltimosMovimientos)
                {
                    if (b.Tanque.Id == tanque4.Id)
                    {
                        balance4 = b;
                        <TanGeneral BalanceModal="b" />
                    }

                }
            </div>
        </div>
       
    </Callout>
    <Callout Type="CalloutType.Tip" Heading="CONDICIONES">
        <EditForm Model="balance4" class="auth-form login-form">
            <div class="row">
                <div class="col-4">
                    <label>Nivel</label>
                    <input name="signin-email" type="number" class="form-control signin-email" placeholder="Nivel" required="required" @bind=balance4.Nivel />
                </div>
                <div class="col-4">
                    <label>Interfase</label>
                    <input id="signin-password" name="signin-password" type="number" class="form-control signin-password" placeholder="Interfase" required="required" @bind=balance4.Interfase />
                </div>
                <div class="col-4">
                    <label>API</label>
                    <input name="signin-email" type="number" class="form-control signin-email" placeholder="Api" required="required" @bind=balance4.Api />
                </div>
            </div>
            <div class="row">
                <div class="col-4">
                    <label>TEMP API</label>
                    <input id="signin-password" name="signin-password" type="number" class="form-control signin-password" placeholder="T API" required="required" @bind=balance4.TemFluidoApi />
                </div>
                <div class="col-4">
                    <label>TEMP AMBIENTE</label>
                    <input name="signin-email" type="number" class="form-control signin-email" placeholder="T amb" required="required" @bind=balance4.TemAmbiente />
                </div>
                <div class="col-4">
                    <label>TEMP TANQUE</label>
                    <input id="signin-password" name="signin-password" type="number" class="form-control signin-password" placeholder="T Tanq" required="required" @bind=balance4.TemTanque />
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <label>S&W</label>
                    <input name="signin-email" type="number" class="form-control signin-email" placeholder="S&W" required="required" @bind=balance4.Syw />
                </div>
                <div class="col-6">
                    <label>KARL FISHER</label>
                    <input id="signin-password" name="signin-password" type="number" class="form-control signin-password" placeholder="K F" required="required" @bind=balance4.KarlFisher />
                </div>
            </div>            
        </EditForm>
    </Callout>  

}
else
{
    balance4.Id = -1;
}
<br />
<div style="display:flex;justify-content:center">
    <button class="btn btn-primary" @onclick=VerMas>Añadir Tanque</button>
    <button class="btn btn-warning" @onclick=VerMenos>Remover Tanque</button>
</div>
<div style="display:flex;justify-content:center">
    <img src="/CarroTanque.png" class="img-fluid" alt="...">
</div>
<Callout Heading="DATOS DEL DESPACHO">
    <EditForm Model="NuevoDespacho" class="auth-form login-form">
        <div class="row">
            <div class="col-6">
                <label>Oferta</label>
                <select class="form-select" @bind=NuevoDespacho.OfertaDiariaId aria-label="Default select example">
                    <option selected>Elegir Oferta</option>
                    @foreach (var i in Ofertas)
                    {
                        <option value="@i.Id">@i.DocDeTransporte @i.Ruta.Nombre @i.Empresa.Nombre </option>
                    }
                </select>
            </div>
            <div class="col-6">
                <label>Material</label>
                <select class="form-select" @bind=NuevoDespacho.EcopetrolMaterial aria-label="Default select example">
                    <option selected>Elegir Material</option>
                    @foreach (var i in Materiales)
                    {
                        <option value="@i.Descripcion">@i.Descripcion </option>
                    }
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <br />
                <button type="button" @onclick=VertablaSellos class="btn btn-primary">Elegir Sellos Max(6)</button><label>@SellosSelec.Count</label>
                @if (versellos)
                {
                    <div style="height:100px;overflow:auto">
                        <table class="table table-dark">
                            <thead>
                                <tr>
                                    <th>Numero</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var i in Sellos)
                                {
                                    <tr>
                                        <td>@i.NumeroSello</td>
                                        <td>
                                            @if (i.Seleccionado == 0)
                                            {
                                                <button type="button" class="btn btn-secondary" @onclick="(()=>AdicionarSello(i))"><i class="bi bi-check2-circle"></i></button>
                                            }
                                            else
                                            {
                                                <button type="button" class="btn btn-success" @onclick="(()=>QuitarSello(i))"><i class="bi bi-check2-circle"></i></button>
                                            }

                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
        <div class="row">

            <div class="col-6">
                <label>Elegir Guias</label>
                <select class="form-select" @bind=numGuia aria-label="Default select example">
                    <option selected>Guia</option>
                    @foreach (var i in Guias)
                    {
                        <option value="@i.NumeroGuia">@i.NumeroGuia </option>
                    }
                </select>
            </div>
            <div class="col-2">
                <label>IND</label>
                <input type="number" class="form-control" placeholder="Ind" required="required" @bind-value=EnteroGuia />
            </div>
            <div class="col-4">
                <label>Fecha Tansito</label>
                <input name="signin-email" type="datetime" class="form-control signin-email" placeholder="S&W" required="required" @bind=NuevoDespacho.FechaInicioTransito />
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                <label>Fecha Enturne</label>
                <input name="signin-email" type="datetime" class="form-control signin-email" placeholder="S&W" required="required" @bind=NuevoDespacho.FechaEnturne />
            </div>
            <div class="col-3">
                <label>Fecha Lamado</label>
                <input name="signin-password" type="datetime" class="form-control signin-password" placeholder="K F" required="required" @bind=NuevoDespacho.FechaEnturne />
            </div>
            <div class="col-3">
                <label>Inicio llenado</label>
                <input name="signin-password" type="datetime" class="form-control signin-password" placeholder="K F" required="required" @bind=NuevoDespacho.FechaEnturne />
            </div>
            <div class="col-3">
                <label>Final llenado</label>
                <input name="signin-password" type="datetime" class="form-control signin-password" placeholder="K F" required="required" @bind=NuevoDespacho.FechaEnturne />
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <label>Observaciones</label>
                <input type="text" class="form-control signin-email" placeholder="Observaciones" required="required" @bind=NuevoDespacho.Observaciones />
            </div>
        </div>
        <br />
    </EditForm>
</Callout>
<div style="display:flex;justify-content:center">
    <button class="btn btn-primary" @onclick=Despachar>Despachar</button>
</div>
<br />
<br />
<!-- Button trigger modal -->
@code {
    Balance balance2 = new Balance();
    Balance balance3 = new Balance();
    Balance balance4 = new Balance();
    Tanque tanque2 = new Tanque();
    Tanque tanque3 = new Tanque();
    Tanque tanque4 = new Tanque();
    Consulta consulta = new Consulta();
    FormatoCarga NuevoDespacho = new FormatoCarga();
    int ConteoTanques = 1;
    int EnteroGuia = 0;
    string numGuia = "";
    double SumaTov = 0;
    double SumaGsv = 0;
    bool versellos = false;
    public static List<Balance> UltimosMovimientos = new List<Balance>();
    public static List<Balance> BalancesDespachar = new List<Balance>();
    public static List<Balance> BalancesConfirmar = new List<Balance>();
    public static List<OfertaDiaria> Ofertas = new List<OfertaDiaria>();
    public static List<EcopetrolMaterial> Materiales = new List<EcopetrolMaterial>();
    public static List<Sello> Sellos = new List<Sello>();
    public static List<Guia> Guias = new List<Guia>();
    protected override async Task OnInitializedAsync()
    {
        var ultimos = await Http.PostAsJsonAsync($"api/Balance/Aforos", consulta);
        UltimosMovimientos = await ultimos.Content.ReadFromJsonAsync<List<Balance>>();

        var resultado = await Http.GetFromJsonAsync<List<OfertaDiaria>>("api/OfertaDiaria/disponible");
        if (resultado != null)
            Ofertas = resultado;
        var resMat = await Http.GetFromJsonAsync<List<EcopetrolMaterial>>("api/EcopetrolMaterial");
        if (resMat != null)
            Materiales = resMat;
        var resSello = await Http.GetFromJsonAsync<List<Sello>>("api/Sello");
        if (resSello != null)
            Sellos = resSello;
        var resGuia = await Http.GetFromJsonAsync<List<Guia>>("api/Guia");
        if (resGuia != null)
            Guias = resGuia;
    }
    void VerMas()
    {
        ConteoTanques += 1;
    }
    void VerMenos()
    {
        if (ConteoTanques > 1)
        {
            ConteoTanques -= 1;
        }

    }
    async Task Despachar()
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Guardar",
                Text = "¿ Estas seguro que deseas realizar despacho ?",
                Icon = SweetAlertIcon.Info,
                ShowCancelButton = true,
                ConfirmButtonText = "Guardar",
                CancelButtonText = "Cancelar"
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            @foreach (var sello in SellosSelec)
            {
                NuevoDespacho.Sellos += sello.NumeroSello + ", ";
                sello.Seleccionado = 0;
                sello.Estado = 0;
                var respuesta = await Http.PutAsJsonAsync($"api/Sello/{sello.Id}", sello);
            }
            SellosSelec.Clear();
            NuevoDespacho.NumGuia = numGuia + "-" + EnteroGuia;
            BalancesDespachar.Add(balance2);
            BalancesDespachar.Add(balance3);
            BalancesDespachar.Add(balance4);
            foreach (var i in BalancesDespachar)
            {
                if (i.Id > 0)
                {
                    i.Id = 0;
                    i.Fecha = DateTime.Now;
                    i.TipoMovimiento = "Despacho";
                    var respue = await Http.PostAsJsonAsync("api/Balance/Validar", i);
                    var balres = await respue.Content.ReadFromJsonAsync<Balance>();
                    BalancesConfirmar.Add(balres);
                }
            }
            SumaTov = (double)BalancesConfirmar.Sum(t => t.DeltaTov);
            SumaGsv = (double)BalancesConfirmar.Sum(t => t.DeltaGsv);
            NuevoDespacho.FactorTempCarga = Math.Round(SumaGsv / SumaTov, 5);
            foreach (var t in BalancesConfirmar)
            {
                NuevoDespacho.GovCarga += (double)t.DeltaGov;
                NuevoDespacho.GsvCarga += (double)t.DeltaGsv;
                NuevoDespacho.NsvCarga += (double)t.DeltaNsv;
                NuevoDespacho.BSWCarga += (double)t.CSW() * ((double)t.DeltaTov / SumaTov);
                NuevoDespacho.TempCarga += (double)t.TemTanque * ((double)t.DeltaTov / SumaTov);
                NuevoDespacho.APICarga += (double)t.Api60F() * ((double)t.DeltaTov / SumaTov);
                var respue = await Http.PostAsJsonAsync("api/Balance", t);
            }
            NuevoDespacho.GovCarga = (-1) * Math.Round(NuevoDespacho.GovCarga, 2);
            NuevoDespacho.GsvCarga = (-1) * Math.Round(NuevoDespacho.GsvCarga, 2);
            NuevoDespacho.NsvCarga = (-1) * Math.Round(NuevoDespacho.NsvCarga, 2);
            var respueFor = await Http.PostAsJsonAsync("api/FormatoCarga", NuevoDespacho);
            var exito = await Swal.FireAsync(new SweetAlertOptions
                {
                    Position = "center",
                    Title = "Guardado Correctamente",
                    Icon = SweetAlertIcon.Success,
                    ShowCancelButton = false,
                    Timer = 1500
                });
        }
    }

    void VertablaSellos()
    {
        if (versellos == false)
        {
            versellos = true;
        }
        else
        {
            versellos = false;
        }

    }
    public static List<Sello> SellosSelec = new List<Sello>();
    async Task AdicionarSello(Sello sello)
    {
        sello.Seleccionado = 1;
        var respuesta = await Http.PutAsJsonAsync($"api/Sello/{sello.Id}", sello);
        SellosSelec.Add(sello);
        await ActualizarSellos();

    }
    async Task QuitarSello(Sello sello)
    {
        sello.Seleccionado = 0;
        var respuesta = await Http.PutAsJsonAsync($"api/Sello/{sello.Id}", sello);
        var sel = SellosSelec.Where(x => x.Id == sello.Id).FirstOrDefault();
        SellosSelec.Remove(sel);
        await ActualizarSellos();
    }

    async Task ActualizarSellos()
    {
        var resSello = await Http.GetFromJsonAsync<List<Sello>>("api/Sello");
        if (resSello != null)
            Sellos = resSello;
    }
}


